旋转数组
给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。

示例 1:

输入: [1,2,3,4,5,6,7] 和 k = 3
输出: [5,6,7,1,2,3,4]
解释:
向右旋转 1 步: [7,1,2,3,4,5,6]
向右旋转 2 步: [6,7,1,2,3,4,5]
向右旋转 3 步: [5,6,7,1,2,3,4]
示例 2:

输入: [-1,-100,3,99] 和 k = 2
输出: [3,99,-1,-100]
解释: 
向右旋转 1 步: [99,-1,-100,3]
向右旋转 2 步: [3,99,-1,-100]
说明:

尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。
要求使用空间复杂度为 O(1) 的 原地 算法。
///解法一：一个一个的转换，较繁琐；
lass Solution {
        public void rotate(int[] nums, int k) {
            k = k % nums.length;
            //每次往后移一位，移动k次
            for (int i = 0; i < k; i++) {
                int fir = nums[nums.length - 1];
                //从倒数第二个元素开始移动
                for (int j = nums.length - 2; j >= 0; j--) {
                    nums[j + 1] = nums[j];
                }
                //每次的第一个元素都是移动前的最后一个
                nums[0] = fir;
            }
        }
    }
///解法二：用一个新数组保存转换的数据，然后再将数据传给原始数组；
class Solution {
        public void rotate(int[] nums, int k) {
            k = k % nums.length;
            int[] nnums = new int[nums.length];
            for (int i = 0; i < nums.length; i++) {
                int num = (i + k) % nums.length;
                nnums[num] = nums[i];

            }
            for (int i = 0; i < nnums.length; i++) {
                nums[i] = nnums[i];
            }
        }
    }
///解法三：“三次转换”
1 2 3 4 5 6 7
            |第一次转换
4 3 2 1 5 6 7 
            |第二次转换
4 3 2 1 7 6 5
            |第三次转换
5 6 7 1 2 3 4 
用到了一个reverse函数（数组，开始，结尾）；
///程序文件：
class Solution {
    public void rotate(int[] nums, int k) {
        if(nums==null || nums.length==0){
            return ;
        }
        if(nums.length==1){
            return ;
        }
        k=k%nums.length;
        reverse(nums,0,k-1);
        reverse(nums,k,nums.length-1);
        reverse(nums);
    }
    public void reverse(int[] arr,int begin,int end){
        int half=(end-begin+1)/2;
        int tar;
        for(int i=0;i<half;i++){
            tar=arr[begin];
            arr[begin]=arr[end];
            arr[end]=tar;
            begin++;
            end--;
        }
       
    }
    public void reverse(int[] arr){
        reverse(arr,0,arr.length-1);
    }
}
